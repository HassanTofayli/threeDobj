"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PreventParentScroll = function () {
    function PreventParentScroll(elem) {
        _classCallCheck(this, PreventParentScroll);

        this.elem = elem;
    }

    _createClass(PreventParentScroll, [{
        key: 'start',
        value: function start() {
            this.handler = this.onMouseWheel.bind(this);
            this.elem.addEventListener('mousewheel', this.handler, false);
        }
    }, {
        key: 'stop',
        value: function stop() {
            this.elem.removeEventListener('mousewheel', this.handler);
        }
    }, {
        key: 'onMouseWheel',
        value: function onMouseWheel(event) {
            if (event.preventParentScroll) {
                return;
            }
            var y = this.getDelta(event);
            if (y) {
                var outerHeight = this.elem.getBoundingClientRect().height;
                var computedStyle = window.getComputedStyle(this.elem);
                var borderTopWidth = parseFloat(computedStyle.borderTopWidth || '') || 0;
                var borderBottomWidth = parseFloat(computedStyle.borderBottomWidth || '') || 0;
                var elemScrollableHeight = outerHeight - borderTopWidth - borderBottomWidth;
                this.maybePreventMouseWheel(y, elemScrollableHeight, this.elem.scrollTop, this.elem.scrollHeight, event);
            }
            event.preventParentScroll = true;
        }
    }, {
        key: 'getDelta',
        value: function getDelta(event) {
            var xAxis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (event.wheelDelta) {
                var delta = event.wheelDeltaY;
                if (xAxis) {
                    delta = event.wheelDeltaX;
                }
                return delta;
            } else if (event.detail) {
                if (event.axis && (event.axis === 1 && xAxis || event.axis === 2 && !xAxis)) {
                    return -1 * event.detail * 12;
                }
            } else if (event.deltaMode) {
                if (xAxis) {
                    return event.deltaX;
                } else {
                    return event.deltaY;
                }
            }
            return 0;
        }
    }, {
        key: 'maybePreventMouseWheel',
        value: function maybePreventMouseWheel(delta, elemLength, elemScroll, scrollLength, event) {
            if (delta < 0 && this.scrollIsMaxed(elemLength, elemScroll, scrollLength)) {
                event.preventDefault();
            } else if (delta > 0 && this.scrollIsMinned(elemScroll)) {
                event.preventDefault();
            }
        }
    }, {
        key: 'scrollIsMaxed',
        value: function scrollIsMaxed(elemLength, elemScroll, scrollLength) {
            return elemLength + elemScroll === scrollLength;
        }
    }, {
        key: 'scrollIsMinned',
        value: function scrollIsMinned(elemScroll) {
            return elemScroll === 0;
        }
    }]);

    return PreventParentScroll;
}();

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PreventParentScroll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUE7Ozs7Ozs7QUFHRSxpQ0FBbUIsQUFBaUI7OztBQUFqQixhQUFJLE9BQUosQUFBSSxBQUFhLEFBQUk7QUFBQyxBQUV6QyxBQUFLOzs7OztBQUNILEFBQUksaUJBQUMsQUFBTyxVQUFHLEFBQUksS0FBQyxBQUFZLGFBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDO0FBQzVDLEFBQUksaUJBQUMsQUFBSSxLQUFDLEFBQWdCLGlCQUFDLEFBQVksY0FBRSxBQUFJLEtBQUMsQUFBTyxTQUFFLEFBQUssQUFBQyxBQUFDLEFBQ2hFO0FBQUMsQUFFRCxBQUFJOzs7O0FBQ0YsQUFBSSxpQkFBQyxBQUFJLEtBQUMsQUFBbUIsb0JBQUMsQUFBWSxjQUFFLEFBQUksS0FBQyxBQUFPLEFBQUMsQUFBQyxBQUM1RDtBQUFDLEFBRU8sQUFBWTs7O3FDQUFDLEFBQW1DO0FBQ3RELEFBQUUsQUFBQyxnQkFBQyxBQUFLLE1BQUMsQUFBbUIsQUFBQyxxQkFBQyxBQUFDO0FBQzlCLEFBQU0sQUFBQyxBQUNUO0FBQUM7QUFFRCxnQkFBSSxBQUFDLElBQUcsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFLLEFBQUMsQUFBQztBQUU3QixBQUFFLEFBQUMsZ0JBQUMsQUFBQyxBQUFDLEdBQUMsQUFBQztBQUNOLG9CQUFJLEFBQVcsY0FBRyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQXFCLEFBQUUsd0JBQUMsQUFBTSxBQUFDO0FBQzNELG9CQUFJLEFBQWEsZ0JBQUcsQUFBTSxPQUFDLEFBQWdCLGlCQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQztBQUN2RCxvQkFBSSxBQUFjLGlCQUFHLEFBQVUsV0FBQyxBQUFhLGNBQUMsQUFBYyxrQkFBSSxBQUFFLEFBQUMsT0FBSSxBQUFDLEFBQUM7QUFDekUsb0JBQUksQUFBaUIsb0JBQUcsQUFBVSxXQUFDLEFBQWEsY0FBQyxBQUFpQixxQkFBSSxBQUFFLEFBQUMsT0FBSSxBQUFDLEFBQUM7QUFDL0Usb0JBQUksQUFBb0IsdUJBQUcsQUFBVyxjQUFHLEFBQWMsaUJBQUcsQUFBaUIsQUFBQztBQUU1RSxBQUFJLHFCQUFDLEFBQXNCLHVCQUFDLEFBQUMsR0FBRSxBQUFvQixzQkFBRSxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQVMsV0FBRSxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQVksY0FBRSxBQUFLLEFBQUMsQUFBQyxBQUMzRztBQUFDO0FBRUQsQUFBSyxrQkFBQyxBQUFtQixzQkFBRyxBQUFJLEFBQUMsQUFDbkM7QUFBQyxBQUVPLEFBQVE7OztpQ0FBQyxBQUFtQztnQkFBRSw0RUFBaUIsQUFBSzs7QUFDMUUsQUFBRSxBQUFDLGdCQUFDLEFBQUssTUFBQyxBQUFVLEFBQUMsWUFBQyxBQUFDO0FBQ3JCLG9CQUFJLEFBQUssUUFBRyxBQUFLLE1BQUMsQUFBVyxBQUFDO0FBRTlCLEFBQUUsQUFBQyxvQkFBQyxBQUFLLEFBQUMsT0FBQyxBQUFDO0FBQ1YsQUFBSyw0QkFBRyxBQUFLLE1BQUMsQUFBVyxBQUFDLEFBQzVCO0FBQUM7QUFFRCxBQUFNLHVCQUFDLEFBQUssQUFBQyxBQUNmO0FBQUMsQUFBQyxBQUFJLHVCQUFLLEFBQUssTUFBQyxBQUFNLEFBQUMsUUFBQyxBQUFDO0FBQ3hCLEFBQUUsQUFBQyxvQkFBQyxBQUFLLE1BQUMsQUFBSSxBQUFJLFNBQUUsQUFBSyxNQUFDLEFBQUksU0FBSyxBQUFDLEtBQUksQUFBSyxBQUFDLEFBQUksS0FBL0IsSUFBZ0MsQUFBSyxNQUFDLEFBQUksU0FBSyxBQUFDLEtBQUksQ0FBQyxBQUFLLEFBQUMsQUFBQyxBQUFDLFFBQUMsQUFBQztBQUNoRixBQUFNLDJCQUFDLENBQUMsQUFBQyxJQUFHLEFBQUssTUFBQyxBQUFNLFNBQUcsQUFBRSxBQUFDLEFBQ2hDO0FBQUMsQUFDSDtBQUFDLEFBQUMsQUFBSSxhQUpDLEFBQUUsQUFBQyxNQUlILEFBQUUsQUFBQyxJQUFDLEFBQUssTUFBQyxBQUFTLEFBQUMsV0FBQyxBQUFDO0FBQzNCLEFBQUUsQUFBQyxvQkFBQyxBQUFLLEFBQUMsT0FBQyxBQUFDO0FBQ1YsQUFBTSwyQkFBQyxBQUFLLE1BQUMsQUFBTSxBQUFDLEFBQ3RCO0FBQUMsQUFBQyxBQUFJLHVCQUFDLEFBQUM7QUFDTixBQUFNLDJCQUFDLEFBQUssTUFBQyxBQUFNLEFBQUMsQUFDdEI7QUFBQyxBQUNIO0FBQUM7QUFFRCxBQUFNLG1CQUFDLEFBQUMsQUFBQyxBQUNYO0FBQUMsQUFFTyxBQUFzQjs7OytDQUM1QixBQUFhLE9BQUUsQUFBa0IsWUFBRSxBQUFrQixZQUFFLEFBQW9CLGNBQUUsQUFBbUM7QUFFaEgsQUFBRSxBQUFDLGdCQUFDLEFBQUssUUFBRyxBQUFDLEtBQUksQUFBSSxLQUFDLEFBQWEsY0FBQyxBQUFVLFlBQUUsQUFBVSxZQUFFLEFBQVksQUFBQyxBQUFDLGVBQUMsQUFBQztBQUMxRSxBQUFLLHNCQUFDLEFBQWMsQUFBRSxBQUFDLEFBQ3pCO0FBQUMsQUFBQyxBQUFJLG1CQUFDLEFBQUUsQUFBQyxJQUFDLEFBQUssUUFBRyxBQUFDLEtBQUksQUFBSSxLQUFDLEFBQWMsZUFBQyxBQUFVLEFBQUMsQUFBQyxhQUFDLEFBQUM7QUFDeEQsQUFBSyxzQkFBQyxBQUFjLEFBQUUsQUFBQyxBQUN6QjtBQUFDLEFBQ0g7QUFBQyxBQUVPLEFBQWE7OztzQ0FBQyxBQUFrQixZQUFFLEFBQWtCLFlBQUUsQUFBb0I7QUFDaEYsQUFBTSxtQkFBQyxBQUFVLGFBQUcsQUFBVSxlQUFLLEFBQVksQUFBQyxBQUNsRDtBQUFDLEFBRU8sQUFBYzs7O3VDQUFDLEFBQWtCO0FBQ3ZDLEFBQU0sbUJBQUMsQUFBVSxlQUFLLEFBQUMsQUFBQyxBQUMxQjtBQUFDLEFBQ0Y7Ozs7Ozs7QUFHRCxrQkFBZSxBQUFtQixBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBQcmV2ZW50UGFyZW50TW91c2VXaGVlbEV2ZW50IGV4dGVuZHMgTW91c2VXaGVlbEV2ZW50IHtcbiAgcHJldmVudFBhcmVudFNjcm9sbDogYm9vbGVhbjtcbiAgYXhpczogbnVtYmVyO1xufVxuXG5cbmNsYXNzIFByZXZlbnRQYXJlbnRTY3JvbGwge1xuICBwcml2YXRlIGhhbmRsZXI6IChldmVudDogUHJldmVudFBhcmVudE1vdXNlV2hlZWxFdmVudCkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbTogSFRNTEVsZW1lbnQpIHsgfVxuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuaGFuZGxlciA9IHRoaXMub25Nb3VzZVdoZWVsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5lbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCB0aGlzLmhhbmRsZXIsIGZhbHNlKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5lbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCB0aGlzLmhhbmRsZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbk1vdXNlV2hlZWwoZXZlbnQ6IFByZXZlbnRQYXJlbnRNb3VzZVdoZWVsRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQucHJldmVudFBhcmVudFNjcm9sbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB5ID0gdGhpcy5nZXREZWx0YShldmVudCk7XG5cbiAgICBpZiAoeSkge1xuICAgICAgbGV0IG91dGVySGVpZ2h0ID0gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgIGxldCBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtKTtcbiAgICAgIGxldCBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCB8fCAnJykgfHwgMDtcbiAgICAgIGxldCBib3JkZXJCb3R0b21XaWR0aCA9IHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCB8fCAnJykgfHwgMDtcbiAgICAgIGxldCBlbGVtU2Nyb2xsYWJsZUhlaWdodCA9IG91dGVySGVpZ2h0IC0gYm9yZGVyVG9wV2lkdGggLSBib3JkZXJCb3R0b21XaWR0aDtcblxuICAgICAgdGhpcy5tYXliZVByZXZlbnRNb3VzZVdoZWVsKHksIGVsZW1TY3JvbGxhYmxlSGVpZ2h0LCB0aGlzLmVsZW0uc2Nyb2xsVG9wLCB0aGlzLmVsZW0uc2Nyb2xsSGVpZ2h0LCBldmVudCk7XG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudFBhcmVudFNjcm9sbCA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIGdldERlbHRhKGV2ZW50OiBQcmV2ZW50UGFyZW50TW91c2VXaGVlbEV2ZW50LCB4QXhpczogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgaWYgKGV2ZW50LndoZWVsRGVsdGEpIHsgLy9mb3IgZXZlcnl0aGluZyBidXQgZmlyZWZveFxuICAgICAgbGV0IGRlbHRhID0gZXZlbnQud2hlZWxEZWx0YVk7XG5cbiAgICAgIGlmICh4QXhpcykge1xuICAgICAgICBkZWx0YSA9IGV2ZW50LndoZWVsRGVsdGFYO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVsdGE7XG4gICAgfSBlbHNlIGlmIChldmVudC5kZXRhaWwpIHsgLy9mb3IgZmlyZWZveCBwcmUgdmVyc2lvbiAxN1xuICAgICAgaWYgKGV2ZW50LmF4aXMgJiYgKChldmVudC5heGlzID09PSAxICYmIHhBeGlzKSB8fCAoZXZlbnQuYXhpcyA9PT0gMiAmJiAheEF4aXMpKSkge1xuICAgICAgICByZXR1cm4gLTEgKiBldmVudC5kZXRhaWwgKiAxMjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV2ZW50LmRlbHRhTW9kZSkge1xuICAgICAgaWYgKHhBeGlzKSB7XG4gICAgICAgIHJldHVybiBldmVudC5kZWx0YVg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXZlbnQuZGVsdGFZO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcHJpdmF0ZSBtYXliZVByZXZlbnRNb3VzZVdoZWVsKFxuICAgIGRlbHRhOiBudW1iZXIsIGVsZW1MZW5ndGg6IG51bWJlciwgZWxlbVNjcm9sbDogbnVtYmVyLCBzY3JvbGxMZW5ndGg6IG51bWJlciwgZXZlbnQ6IFByZXZlbnRQYXJlbnRNb3VzZVdoZWVsRXZlbnRcbiAgKSB7XG4gICAgaWYgKGRlbHRhIDwgMCAmJiB0aGlzLnNjcm9sbElzTWF4ZWQoZWxlbUxlbmd0aCwgZWxlbVNjcm9sbCwgc2Nyb2xsTGVuZ3RoKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKGRlbHRhID4gMCAmJiB0aGlzLnNjcm9sbElzTWlubmVkKGVsZW1TY3JvbGwpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2Nyb2xsSXNNYXhlZChlbGVtTGVuZ3RoOiBudW1iZXIsIGVsZW1TY3JvbGw6IG51bWJlciwgc2Nyb2xsTGVuZ3RoOiBudW1iZXIpIHtcbiAgICByZXR1cm4gZWxlbUxlbmd0aCArIGVsZW1TY3JvbGwgPT09IHNjcm9sbExlbmd0aDtcbiAgfVxuXG4gIHByaXZhdGUgc2Nyb2xsSXNNaW5uZWQoZWxlbVNjcm9sbDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIGVsZW1TY3JvbGwgPT09IDA7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBQcmV2ZW50UGFyZW50U2Nyb2xsOyJdfQ==